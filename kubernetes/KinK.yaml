---
apiVersion: v1
kind: ConfigMap
metadata:
  name: containerd-config
data:
  containerd.config: |
    # explicitly use v2 config format
    version = 2

    [proxy_plugins]
    # fuse-overlayfs is used for rootless
    [proxy_plugins."fuse-overlayfs"]
      type = "snapshot"
      address = "/run/containerd-fuse-overlayfs.sock"

    [plugins."io.containerd.grpc.v1.cri".containerd]
      # save disk space when using a single snapshotter
      discard_unpacked_layers = true
      # explicitly use default snapshotter so we can sed it in entrypoint
      snapshotter = "overlayfs"
      # explicit default here, as we're configuring it below
      default_runtime_name = "runc"
    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
      # set default runtime handler to v2, which has a per-pod shim
      runtime_type = "io.containerd.runc.v2"
      # Generated by "ctr oci spec" and modified at base container to mount poduct_uuid
      base_runtime_spec = "/etc/containerd/cri-base.json"
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
        # use systemd cgroup by default
        # SystemdCgroup = true

    # Setup a runtime with the magic name ("test-handler") used for Kubernetes
    # runtime class tests ...
    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.test-handler]
      # same settings as runc
      runtime_type = "io.containerd.runc.v2"
      base_runtime_spec = "/etc/containerd/cri-base.json"
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.test-handler.options]
        # SystemdCgroup = true

    [plugins."io.containerd.grpc.v1.cri"]
      # use fixed sandbox image
      sandbox_image = "registry.k8s.io/pause:3.10"
      # allow hugepages controller to be missing
      # see https://github.com/containerd/cri/pull/1501
      tolerate_missing_hugepages_controller = true
      # restrict_oom_score_adj needs to be true when running inside UserNS (rootless)
      restrict_oom_score_adj = false
  kind.config: |
    kind: Cluster
    apiVersion: kind.x-k8s.io/v1alpha4
    # 1 control plane node and 4 workers
    nodes:
      # the control plane node config
      - role: control-plane
        extraMounts:
        - hostPath: /config/containerd.config
          containerPath: /etc/containerd/config.toml
        kubeadmConfigPatches:
        - |
          kind: InitConfiguration
          nodeRegistration:
            kubeletExtraArgs:
              cgroups-per-qos: "false"
              enforce-node-allocatable: ""
        - |
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          containerLogMaxSize: "50Mi"
          cgroups-per-qos: false
          enforce-node-allocatable: ""
      - role: worker
        extraMounts:
        - hostPath: /config/containerd.config
          containerPath: /etc/containerd/config.toml
        kubeadmConfigPatches:
        - |
          kind: JoinConfiguration
          nodeRegistration:
            kubeletExtraArgs:
              cgroups-per-qos: "false"
              enforce-node-allocatable: ""
              system-reserved: cpu=32000m
      - role: worker
        extraMounts:
        - hostPath: /config/containerd.config
          containerPath: /etc/containerd/config.toml
        kubeadmConfigPatches:
        - |
          kind: JoinConfiguration
          nodeRegistration:
            kubeletExtraArgs:
              cgroups-per-qos: "false"
              enforce-node-allocatable: ""
              # system-reserved: cpu=32000m
---
apiVersion: v1
kind: Pod
metadata:
  name: kink
  namespace: default
spec:
  containers:
  - image: m.daocloud.io/docker.io/library/docker:28.1.1-dind
    imagePullPolicy: IfNotPresent
    name: dockerd
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /var/run
      name: docker-sock
    - mountPath: /config
      name: containerd-config
  - image: m.daocloud.io/docker.io/library/docker:28.1.1-dind
    imagePullPolicy: IfNotPresent
    command: 
    - sh
    - -c
    - |
      wget https://go.dev/dl/go1.24.3.linux-amd64.tar.gz;
      rm -rf /usr/local/go && tar -C /usr/local -xzf go1.24.3.linux-amd64.tar.gz;
      GOBIN='/tmp/gobin' /usr/local/go/bin/go install sigs.k8s.io/kind@v0.27.0;
      /tmp/gobin/kind create cluster \
      --name kind \
      --image m.daocloud.io/docker.io/kindest/node:v1.31.4 \
      --config /config/kind.config \
      --retain; 
    name: kind
    env:
    - name: GOPROXY
      value: https://goproxy.cn
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run
      name: docker-sock
    - mountPath: /config
      name: containerd-config
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  priority: 0
  restartPolicy: Never
  schedulerName: default-scheduler
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  volumes:
  - emptyDir: {}
    name: docker-sock
  - name: containerd-config
    configMap:
      name: containerd-config
